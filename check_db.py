#!/usr/bin/env python3
"""
Script to check database contents on Railway
"""

import os
import sys
import logging
from db import get_db

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_database():
    """Check what's really in the database"""
    try:
        print("=" * 60)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• RAILWAY")
        print("=" * 60)
        
        # Check active searches
        print("\nüìã –ê–ö–¢–ò–í–ù–´–ï –ü–û–ò–°–ö–ò:")
        searches = get_db().get_active_searches()
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(searches)}")
        
        for i, search in enumerate(searches, 1):
            print(f"\n{i}. ID: {search['id']}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {search.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   URL: {search['url']}")
            print(f"   Thread ID: {search.get('thread_id', '–ù–µ –∑–∞–¥–∞–Ω')}")
            print(f"   –°–æ–∑–¥–∞–Ω: {search.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
        # Check items
        print(f"\nüì¶ –¢–û–í–ê–†–´ –í –ë–ê–ó–ï:")
        try:
            items_stats = get_db().get_items_stats()
            print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_stats.get('total_items', 0)}")
            
            # Get recent items
            with get_db().get_connection() as conn:
                cursor = conn.cursor()
                get_db().execute_query(cursor, """
                    SELECT title, price, location, created_at, search_name
                    FROM items 
                    ORDER BY created_at DESC 
                    LIMIT 10
                """)
                
                recent_items = cursor.fetchall()
                print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_items)} —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, item in enumerate(recent_items, 1):
                    title, price, location, created_at, search_name = item
                    print(f"  {i}. {title[:50]}...")
                    print(f"     –¶–µ–Ω–∞: {price}, –ú–µ—Å—Ç–æ: {location}")
                    print(f"     –ü–æ–∏—Å–∫: {search_name}, –î–∞—Ç–∞: {created_at}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            
        # Check configuration
        print(f"\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        telegram_token = get_db().get_setting('TELEGRAM_BOT_TOKEN')
        telegram_chat = get_db().get_setting('TELEGRAM_CHAT_ID')
        max_items = get_db().get_setting('MAX_ITEMS_PER_SEARCH', '50')
        search_interval = get_db().get_setting('SEARCH_INTERVAL', '300')
        
        print(f"Telegram Token: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_token else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"Telegram Chat ID: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_chat else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"Max Items Per Search: {max_items}")
        print(f"Search Interval: {search_interval} —Å–µ–∫")
        
        # Check logs
        print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò:")
        try:
            with get_db().get_connection() as conn:
                cursor = conn.cursor()
                get_db().execute_query(cursor, """
                    SELECT timestamp, level, source, message
                    FROM log_entries 
                    ORDER BY timestamp DESC 
                    LIMIT 5
                """)
                
                logs = cursor.fetchall()
                for log in logs:
                    timestamp, level, source, message = log
                    print(f"  [{timestamp}] {level} ({source}): {message[:80]}...")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            
        print("\n" + "=" * 60)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_database()
